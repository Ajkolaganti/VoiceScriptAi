'use client';

import { useState } from 'react';
import { X, Copy, Download, Check, FileText, Clock, Target, BarChart3 } from 'lucide-react';

interface TranscriptionResult {
  transcript: string;
  confidence: number;
  duration: number;
  words?: Array<{
    word: string;
    start: number;
    end: number;
    confidence: number;
  }>;
  metadata?: {
    fileName: string;
    fileSize: number;
    mimeType: string;
    model: string;
    language: string;
  };
}

interface TranscriptModalProps {
  isOpen: boolean;
  onClose: () => void;
  result: TranscriptionResult | null;
}

export default function TranscriptModal({ isOpen, onClose, result }: TranscriptModalProps) {
  const [copied, setCopied] = useState(false);

  if (!isOpen || !result) return null;

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(result.transcript);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy text:', error);
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = result.transcript;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleDownload = () => {
    try {
      // Create a more detailed transcript file
      const transcriptContent = `VoiceScript AI - Audio Transcription
=====================================

File: ${result.metadata?.fileName || 'Unknown'}
Duration: ${result.duration.toFixed(1)} seconds
Confidence: ${Math.round(result.confidence * 100)}%
Model: ${result.metadata?.model || 'nova-2'}
Language: ${result.metadata?.language || 'en-US'}
Transcribed: ${new Date().toLocaleString()}

TRANSCRIPT:
-----------
${result.transcript}

${result.words && result.words.length > 0 ? `
WORD-LEVEL TIMESTAMPS:
---------------------
${result.words.map(word => 
  `${word.start.toFixed(2)}s - ${word.end.toFixed(2)}s: "${word.word}" (${Math.round(word.confidence * 100)}%)`
).join('\n')}
` : ''}

Generated by VoiceScript AI
Powered by Deepgram Nova-2 Model`;

      const blob = new Blob([transcriptContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `transcript-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Failed to download file:', error);
      alert('Failed to download file. Please try again.');
    }
  };

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm">
      <div className="w-full max-w-4xl max-h-[90vh] professional-card rounded-xl shadow-2xl overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="p-2 rounded-lg bg-green-600">
              <FileText className="h-5 w-5 text-white" />
            </div>
            <h3 className="text-xl font-semibold text-gray-900">Transcription Complete</h3>
          </div>
          <button 
            onClick={onClose}
            className="p-1 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X className="h-5 w-5 text-gray-500" />
          </button>
        </div>
        
        {/* Stats */}
        <div className="p-6 border-b border-gray-200">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="flex items-center space-x-3 p-4 stats-card rounded-xl">
              <div className="p-2 rounded-lg bg-green-100">
                <Target className="h-5 w-5 icon-success" />
              </div>
              <div>
                <div className="text-2xl font-bold text-green-600">
                  {Math.round(result.confidence * 100)}%
                </div>
                <div className="text-sm text-gray-500">Accuracy</div>
              </div>
            </div>
            
            <div className="flex items-center space-x-3 p-4 stats-card rounded-xl">
              <div className="p-2 rounded-lg bg-blue-100">
                <Clock className="h-5 w-5 icon-primary" />
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-600">
                  {result.duration.toFixed(1)}s
                </div>
                <div className="text-sm text-gray-500">Duration</div>
              </div>
            </div>
            
            <div className="flex items-center space-x-3 p-4 stats-card rounded-xl">
              <div className="p-2 rounded-lg bg-purple-100">
                <BarChart3 className="h-5 w-5 text-purple-600" />
              </div>
              <div>
                <div className="text-2xl font-bold text-purple-600">
                  {result.transcript.split(' ').length}
                </div>
                <div className="text-sm text-gray-500">Words</div>
              </div>
            </div>
            
            {result.metadata && (
              <div className="md:col-span-3 mt-4">
                <div className="flex items-center space-x-3 p-4 stats-card rounded-xl">
                  <div className="p-2 rounded-lg bg-gray-100">
                    <FileText className="h-5 w-5 icon-secondary" />
                  </div>
                  <div className="flex-1">
                    <div className="text-lg font-bold text-gray-900 truncate">
                      {result.metadata.fileName}
                    </div>
                    <div className="text-sm text-gray-500">
                      {(result.metadata.fileSize / (1024 * 1024)).toFixed(2)} MB â€¢ {result.metadata.mimeType}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        
        {/* Transcript */}
        <div className="p-6 overflow-y-auto max-h-96">
          <div className="bg-gray-50 border border-gray-200 rounded-xl p-6">
            <h4 className="text-lg font-semibold text-gray-900 mb-4">Transcript</h4>
            <div className="text-gray-700 leading-relaxed whitespace-pre-wrap">
              {result.transcript}
            </div>
          </div>
        </div>
        
        {/* Actions */}
        <div className="p-6 border-t border-gray-200">
          <div className="flex flex-col sm:flex-row gap-3">
            <button 
              onClick={handleCopy}
              disabled={!result?.transcript}
              className="flex-1 flex items-center justify-center space-x-2 professional-btn px-6 py-3 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              type="button"
            >
              {copied ? (
                <>
                  <Check className="h-5 w-5" />
                  <span>Copied!</span>
                </>
              ) : (
                <>
                  <Copy className="h-5 w-5" />
                  <span>Copy Text</span>
                </>
              )}
            </button>
            
            <button 
              onClick={handleDownload}
              disabled={!result?.transcript}
              className="flex-1 flex items-center justify-center space-x-2 professional-btn-secondary px-6 py-3 rounded-lg font-medium transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              type="button"
            >
              <Download className="h-5 w-5" />
              <span>Download TXT</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}